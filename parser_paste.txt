program ::= fdecls declarations statement_seq .
fdecls ::= fdec ; fdecls
fdecls ::= ''
fdec ::= def type fname (params) declarations statement_seq fed
params ::= type var params'
params' ::= , params
params' ::= ''
fname ::= id
declarations ::= decl ; declarations
declarations ::= ''
decl ::= type varlist
type ::= int
type ::= double
varlist ::= var varlist'
varlist' ::= , varlist
varlist' ::= ''
statement_seq ::= statement statement_seq'
statement_seq' ::= ; statement_seq
statement ::= if bexpr then statement_seq statement'
statement ::= var = expr
statement ::= while bexpr do statement_seq od
statement ::= print expr
statement ::= return expr
statement ::= ''
statement' ::= fi
statement' ::= else statement_seq fi
expr ::= term expr'
expr' ::= + term expr'
expr' ::= - term expr'
expr' ::= ''
term ::= factor term' 
term' ::= * factor term'
term' ::= / factor term'
term' ::= % factor term'
term' ::= ''
factor ::= id factor'
factor ::= (expr)
factor ::= id(exprseq)
factor' ::= (exprseq)
factor' ::= ''
exprseq ::= expr exprseq'
exprseq ::= ''
exprseq' ::= , exprseq
exprseq' ::= ''
bexpr ::= bterm bexpr'
bexpr' ::= or bterm bexpr'
bexpr' ::= ''
bterm ::= bfactor bterm'
bterm' ::= and bfactor bterm'
bterm' ::= ''
bfactor ::= (bexpr)
bfactor ::= not bfactor
bfactor ::= expr comp expr
comp ::= <
comp ::= >
comp ::= ==
comp ::= <=
comp ::= >=
comp ::= <>
var ::= id var'
var' ::= [expr]
var' ::= ''
letter ::= a
letter ::= b
letter ::= c
letter ::= ...
letter ::= z
digit ::= 1
digit ::= 2
digit ::= 3
digit ::= 4
digit ::= 5
digit ::= 6
digit ::= 7
digit ::= 8
digit ::= 9
digit ::= 0
id ::= letter
id ::= id letter
id ::= id digit
number ::= integer
number ::= double