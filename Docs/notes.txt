methods
- recursive decent --> not recommended
- stack method
- ast

ADJUST THE GRAMMER FOR TOKENS
- be specific with keyword tokens

ast
- elegance 
- pass the ast into the 3rd phase
- don't have to run the grammer again
- if small modifications in the grammer --> easy to modify
- back tracking
    - at any one of the branches a error happens --> it stops producing and returns from there
    - going to try to run the rest of the grammer
    - if even one error don't run phase 3
- ast is weird most tre 

stack
- in the stack you have to run the grammer again
- easier approach
- integrate phase 3 and phase 2
- push the progroam to stack --> push the production --> look at where the top symbol where it is

TODO:
- Adjust grammer terminals based on token identification
- load ll1 table


Recommended Specific Node Types
FunctionDeclarationNode: For function or method declarations, incorporating return type, name, parameters, and body.
TypeNode: For representing types, which could be simple types like int or complex user-defined types.
ParameterNode: For function parameters, including the parameter's type and name.
BlockNode: For blocks of code, usually enclosed in braces {}.
StatementNode and its subclasses:
ReturnStatementNode: For return statements, possibly holding an expression.
ExpressionStatementNode: For expressions that are used as statements, like function calls or assignments.
IfStatementNode: For if statements, potentially including else branches.
WhileStatementNode: For while loops.
ExpressionNode and its subclasses:
BinaryExpressionNode: For binary operations (e.g., arithmetic operations, comparisons).
LiteralNode: For literal values (e.g., numbers, strings).
IdentifierNode: For variable names and possibly function names in call expressions.