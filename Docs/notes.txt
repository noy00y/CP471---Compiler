Semantic Analysis:
- to ensure declarations and statements in the code is semantically correct (ie. is it compileable)
- utilizes ast and symbol table
- Key tasks performed
    - type checking: each operator has the same operands (eg. double with double) or operand has correct assignmentSD
    - checking semantic errors: type mismatches, undeclared variables, reserved keyword misuse

TODO:
- Adjust grammer terminals based on token identification
- load ll1 table

- add panic mode (
- do semantic anaylsis and phase 4 first

Debugging:
- Test Cases: Valid Test Cases
    - Test 1
    - Test 4
    - Test 5
    - Test 6
    - Test 7
    - Test 8
    - Test 9


Statement:
1. a < 0
          statement
            K_IF (Value: if)
            bexpr
              bterm
                bfactor
                  expr
                    term
                      factor
                        id
                          T_IDENTIFIER (Value: a)
                        factorp
                          ε
                      termp
                        ε
                    exprp
                      ε
                  comp
                    K_LS_THEN (Value: <)
                  expr
                    T_INT (Value: 0)

2. a = a
            statement
                var
                  id
                    T_IDENTIFIER (Value: a)
                  varp
                    ε
                K_EQL (Value: =)
                expr
                  term
                    factor
                      id
                        T_IDENTIFIER (Value: a)

3. a < b
                statement
                    K_IF (Value: if)
                    bexpr
                      bterm
                        bfactor
                          expr
                            term
                              factor
                                id
                                  T_IDENTIFIER (Value: a)
                                factorp
                                  ε
                              termp
                                ε
                            exprp
                              ε
                          comp
                            K_LS_THEN (Value: <)
                          expr
                            term
                              factor
                                id
                                  T_IDENTIFIER (Value: b)

4. r = a 
statement
                        var
                          id
                            T_IDENTIFIER (Value: r)
                          varp
                            ε
                        K_EQL (Value: =)
                        expr
                          term
                            factor
                              id
                                T_IDENTIFIER (Value: a)